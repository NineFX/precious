import gleam/list
import gleam/regexp.{type Match, Options}
import gleam/string

const halfwidth_chars = "[\\x{FF01}-\\x{FFEF}]"

const space_chars = "[\\x{00A0}\\x{1680}\\x{2000}-\\x{200A}\\x{202F}\\x{205F}\\x{3000}]"

pub fn map_nonascii_space_to_ascii(s: String) -> String {
  let assert Ok(pattern) =
    regexp.compile(space_chars, with: Options(False, True))
  regexp.replace(each: pattern, in: s, with: " ")
}

pub fn width_map(s: String) -> String {
  let assert Ok(pattern) =
    regexp.compile(halfwidth_chars, with: Options(False, True))
  regexp.match_map(each: pattern, in: s, with: decompose)
}

fn decompose(match: Match) -> String {
  let normalized = nfkc(match.content)
  let normalized_lenth = list.length(string.to_utf_codepoints(normalized))
  case normalized_lenth {
    1 -> normalized
    _ -> match.content
  }
}

pub fn in_arabic_indic(codepoint: Int) -> Bool {
  0x0660 <= codepoint && codepoint <= 0x0669
}

pub fn in_extended_arabic_indic(codepoint: Int) -> Bool {
  0x06F0 <= codepoint && codepoint <= 0x06F9
}

@external(erlang, "unicode", "characters_to_nfkc_binary")
@external(javascript, "../precious_ffi.mjs", "nkfc")
pub fn nfkc(s: String) -> String

@external(erlang, "unicode", "characters_to_nfc_binary")
@external(javascript, "../precious_ffi.mjs", "nfc")
pub fn nfc(s: String) -> String
